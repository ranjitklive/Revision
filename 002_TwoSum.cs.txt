using System;
using System.Text;

namespace Problem
{
    public static class Solution
    {
        public static void Main()
        {
            //6, 5, 4, 3, 2
            Console.WriteLine(TwoSumPossible(new int[] { 3, 4, 5, 6, 7 }, 7));
            //TwoSum(new int[] { 8, 9, 10, 11, 12}, 7);
        }

        public static int[] TwoSum(int[] nums, int target) 
        {
            int[] result = new int[2] { -1, -1 };
            
            if(IsValid(target) && nums != null && nums.Length >= 2 && nums.Length <= Math.Pow(10,4))
            {
                int[] diffArr = new int[nums.Length];

                //pick the first number in array
                for(int i = 0; i < nums.Length - 1 && IsValid(nums[i]); i++)
                {
                    //find out the other number required to complete the sum
                    diffArr[i] = target - nums[i];

                    //check if any of the other numbers in the array
                    //is the number we are looking for
                    //therefore keep checking i+1 onwards
                    for(int j = i + 1; j < nums.Length; j++)
                    {
                        if(nums[j] == diffArr[i])
                        {
                            result[0] = i;
                            result[1] = j;

                            return result;
                        }
                    }
                }
            }
            
            return result;
        }
        
        private static bool IsValid(int number)
        {
            return number >= Math.Pow(-10, 9) && number <= Math.Pow(10, 9);
        }

        public static bool TwoSumPossible(int[] nums, int target) 
        {
            // if(IsValid(target) && nums != null && nums.Length >= 2 && nums.Length <= Math.Pow(10,4))
            // {
            //     for(int i = 0; i < nums.Length - 1 && IsValid(nums[i]); i++)
            //     {
            //         for(int j = i + 1; j < nums.Length && IsValid(nums[j]); j++)
            //         {
            //             if(nums[i] + nums[j] == target)
            //             {
            //                 return true;
            //             }                    
            //         }
            //     }
            // }

            // HashSet<int> diffArr = new HashSet<int>();

            // for(int i = 0; i < nums.Length; i++)
            // {
            //     int diff = target - nums[i]; 

            //     if(diffArr.Contains(diff))
            //     {
            //         return true;
            //     }

            //     diffArr.Add(nums[i]);
            // }

            int left = 0, right = nums.Length -1;

            while(left < right)
            {
                int sum = nums[left] + nums[right];
                if(sum == target)
                    return true;
                else if(sum > target)
                    right--;
                else
                    left++;
            }
            
            return false;
        }
    }
}